/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface StateConnectorContract
  extends Truffle.Contract<StateConnectorInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<StateConnectorInstance>;
}

export interface DataAvailabilityPeriodFinalityProved {
  name: "DataAvailabilityPeriodFinalityProved";
  args: {
    chainId: BN;
    ledger: BN;
    finType: BN;
    sender: string;
    0: BN;
    1: BN;
    2: BN;
    3: string;
  };
}

export interface PaymentFinalityDisproved {
  name: "PaymentFinalityDisproved";
  args: {
    chainId: BN;
    ledger: BN;
    txId: string;
    paymentHash: string;
    sender: string;
    0: BN;
    1: BN;
    2: string;
    3: string;
    4: string;
  };
}

export interface PaymentFinalityProved {
  name: "PaymentFinalityProved";
  args: {
    chainId: BN;
    ledger: BN;
    txId: string;
    paymentHash: string;
    sender: string;
    0: BN;
    1: BN;
    2: string;
    3: string;
    4: string;
  };
}

type AllEvents =
  | DataAvailabilityPeriodFinalityProved
  | PaymentFinalityDisproved
  | PaymentFinalityProved;

export interface StateConnectorInstance extends Truffle.ContractInstance {
  chains(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: boolean;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
    8: BN;
    9: BN;
  }>;

  commitRevealLowerBound(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  commitRevealUpperBound(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  dataAvailabilityPeriodsMined(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  disprovePaymentFinality: {
    (
      chainId: number | BN | string,
      paymentHash: string,
      ledger: number | BN | string,
      txId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      chainId: number | BN | string,
      paymentHash: string,
      ledger: number | BN | string,
      txId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: string; 4: string }>;
    sendTransaction(
      chainId: number | BN | string,
      paymentHash: string,
      ledger: number | BN | string,
      txId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      chainId: number | BN | string,
      paymentHash: string,
      ledger: number | BN | string,
      txId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  finalisedDataAvailabilityPeriods(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: boolean;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: string;
    6: BN;
    7: BN;
    8: boolean;
    9: string;
  }>;

  finalisedPayments(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: boolean;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: string;
    6: BN;
    7: BN;
    8: boolean;
    9: string;
  }>;

  getDataAvailabilityPeriodIndexFinality(
    chainId: number | BN | string,
    dataAvailabilityPeriodIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getDataAvailabilityPeriodsMined(
    miner: string,
    rewardSchedule: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getLatestIndex(
    chainId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN; 5: BN }>;

  getPaymentFinality(
    chainId: number | BN | string,
    txId: string,
    destinationHash: string,
    amount: number | BN | string,
    currencyHash: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: boolean }>;

  getRewardPeriod(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getTotalDataAvailabilityPeriodsMined(
    rewardSchedule: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  initialiseChains: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  initialiseTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  initialised(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  numChains(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  proposedDataAvailabilityProofs(
    arg0: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: boolean;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: string;
    6: BN;
    7: BN;
    8: boolean;
    9: string;
  }>;

  proposedNonPaymentProofs(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: boolean;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: string;
    6: BN;
    7: BN;
    8: boolean;
    9: string;
  }>;

  proposedPaymentProofs(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: boolean;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: string;
    6: BN;
    7: BN;
    8: boolean;
    9: string;
  }>;

  proveDataAvailabilityPeriodFinality: {
    (
      chainId: number | BN | string,
      ledger: number | BN | string,
      dataAvailabilityPeriodHash: string,
      chainTipHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      chainId: number | BN | string,
      ledger: number | BN | string,
      dataAvailabilityPeriodHash: string,
      chainTipHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: string }>;
    sendTransaction(
      chainId: number | BN | string,
      ledger: number | BN | string,
      dataAvailabilityPeriodHash: string,
      chainTipHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      chainId: number | BN | string,
      ledger: number | BN | string,
      dataAvailabilityPeriodHash: string,
      chainTipHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  provePaymentFinality: {
    (
      chainId: number | BN | string,
      paymentHash: string,
      ledger: number | BN | string,
      txId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      chainId: number | BN | string,
      paymentHash: string,
      ledger: number | BN | string,
      txId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: string; 4: string }>;
    sendTransaction(
      chainId: number | BN | string,
      paymentHash: string,
      ledger: number | BN | string,
      txId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      chainId: number | BN | string,
      paymentHash: string,
      ledger: number | BN | string,
      txId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  rewardPeriodTimespan(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  senderBannedUntil(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  totalDataAvailabilityPeriodsMined(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    chains(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: boolean;
      1: BN;
      2: BN;
      3: BN;
      4: BN;
      5: BN;
      6: BN;
      7: BN;
      8: BN;
      9: BN;
    }>;

    commitRevealLowerBound(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    commitRevealUpperBound(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    dataAvailabilityPeriodsMined(
      arg0: string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    disprovePaymentFinality: {
      (
        chainId: number | BN | string,
        paymentHash: string,
        ledger: number | BN | string,
        txId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        chainId: number | BN | string,
        paymentHash: string,
        ledger: number | BN | string,
        txId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN; 1: BN; 2: BN; 3: string; 4: string }>;
      sendTransaction(
        chainId: number | BN | string,
        paymentHash: string,
        ledger: number | BN | string,
        txId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        chainId: number | BN | string,
        paymentHash: string,
        ledger: number | BN | string,
        txId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    finalisedDataAvailabilityPeriods(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: boolean;
      1: string;
      2: string;
      3: BN;
      4: BN;
      5: string;
      6: BN;
      7: BN;
      8: boolean;
      9: string;
    }>;

    finalisedPayments(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: boolean;
      1: string;
      2: string;
      3: BN;
      4: BN;
      5: string;
      6: BN;
      7: BN;
      8: boolean;
      9: string;
    }>;

    getDataAvailabilityPeriodIndexFinality(
      chainId: number | BN | string,
      dataAvailabilityPeriodIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    getDataAvailabilityPeriodsMined(
      miner: string,
      rewardSchedule: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getLatestIndex(
      chainId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN; 5: BN }>;

    getPaymentFinality(
      chainId: number | BN | string,
      txId: string,
      destinationHash: string,
      amount: number | BN | string,
      currencyHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: boolean }>;

    getRewardPeriod(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getTotalDataAvailabilityPeriodsMined(
      rewardSchedule: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    initialiseChains: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    initialiseTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    initialised(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    numChains(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    proposedDataAvailabilityProofs(
      arg0: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: boolean;
      1: string;
      2: string;
      3: BN;
      4: BN;
      5: string;
      6: BN;
      7: BN;
      8: boolean;
      9: string;
    }>;

    proposedNonPaymentProofs(
      arg0: string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: boolean;
      1: string;
      2: string;
      3: BN;
      4: BN;
      5: string;
      6: BN;
      7: BN;
      8: boolean;
      9: string;
    }>;

    proposedPaymentProofs(
      arg0: string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: boolean;
      1: string;
      2: string;
      3: BN;
      4: BN;
      5: string;
      6: BN;
      7: BN;
      8: boolean;
      9: string;
    }>;

    proveDataAvailabilityPeriodFinality: {
      (
        chainId: number | BN | string,
        ledger: number | BN | string,
        dataAvailabilityPeriodHash: string,
        chainTipHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        chainId: number | BN | string,
        ledger: number | BN | string,
        dataAvailabilityPeriodHash: string,
        chainTipHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN; 1: BN; 2: BN; 3: string }>;
      sendTransaction(
        chainId: number | BN | string,
        ledger: number | BN | string,
        dataAvailabilityPeriodHash: string,
        chainTipHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        chainId: number | BN | string,
        ledger: number | BN | string,
        dataAvailabilityPeriodHash: string,
        chainTipHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    provePaymentFinality: {
      (
        chainId: number | BN | string,
        paymentHash: string,
        ledger: number | BN | string,
        txId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        chainId: number | BN | string,
        paymentHash: string,
        ledger: number | BN | string,
        txId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN; 1: BN; 2: BN; 3: string; 4: string }>;
      sendTransaction(
        chainId: number | BN | string,
        paymentHash: string,
        ledger: number | BN | string,
        txId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        chainId: number | BN | string,
        paymentHash: string,
        ledger: number | BN | string,
        txId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    rewardPeriodTimespan(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    senderBannedUntil(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    totalDataAvailabilityPeriodsMined(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
